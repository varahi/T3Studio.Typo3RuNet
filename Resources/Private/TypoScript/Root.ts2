namespace: TypoScript=TYPO3.TypoScript
namespace: Site=T3Studio.Typo3RuNet
include: NodeTypes/*

/**
 * Root TypoScript template for the typo3.ru.net site
 */
  
page = Page {

	htmlTag = TYPO3.TypoScript:Tag {
		tagName = 'html'
		omitClosingTag = TRUE
			attributes {
				prefix='og: http://ogp.me/ns#'
			}
	} 

	head {
		title = Ttree.Plugin.Seo:PageTitle {
			@position = 'after characterSetMetaTag'
		}
		metaTags = Ttree.Plugin.Seo:MetaTags {
			@position = 'after characterSetMetaTag'
		}				
		metadata = TYPO3.TypoScript:Template {
			templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/Page/Default.html'
			sectionName = 'metadata'
		}		
		stylesheets.site = TYPO3.TypoScript:Template {
			templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/Page/Default.html'
			sectionName = 'stylesheets'
			node = ${node}
		}
		javascripts.site = TYPO3.TypoScript:Template {
			templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/Page/Default.html'
			sectionName = 'headScripts'
		}
	}

	body {
		templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/Page/Default.html'
		partialRootPath = 'resource://T3Studio.Typo3RuNet/Private/Templates/Partials/'
		sectionName = 'body'
		parts {
			#menu = Menu
			breadcrumb = Breadcrumb
			
            mainMenu = Menu {
                entryLevel = 1
                maximumLevels = 3
                templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/TypoScriptObjects/MainMenu.html'
                site = ${site}
            }
			secondLevelMenu = Menu {
				entryLevel = 2
				templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/TypoScriptObjects/SecondLevelMenu.html'
				maximumLevels = 1
			}
      		breadcrumb = TYPO3.TypoScript:Template {
        		templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/TypoScriptObjects/BreadcrumbMenu.html'
        		items = ${q(node).add(q(node).parents())}
      		}
			pageTitle = ${q(node).property('title')}			            
            			
		}
		// These are your content areas, you can define as many as you want, just name them and the nodePath.
		content {
			// The default content section
			main = PrimaryContent {
				nodePath = 'main'
			}
            sidebar = PrimaryContent {
                nodePath = 'sidebar'
            }
            teaser = PrimaryContent {
                nodePath = 'teaser'
            }            			
		}	
		// A shared news which can be edited from all pages
		lastNews = ContentCollection {
			nodePath = ${q(site).children('lastnews').property('_path')}
			collection = ${q(site).children('lastnews').children()}
		}		

		javascripts.site = TYPO3.TypoScript:Template {
			templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/Page/Default.html'
			sectionName = 'bodyScripts'
		}
	}
}


prototype(Lelesys.Plugin.ContactForm:ContactForm) < prototype(TYPO3.Neos:Content)
prototype(Lelesys.Plugin.ContactForm:ContactForm) {
	@class = 'Lelesys\\Plugin\\ContactForm\\TypoScript\\ContactFormImplementation'
	templatePath = 'resource://Lelesys.Plugin.ContactForm/Private/Templates/TypoScript/ContactForm.html'
	formIdentifier = ${q(node).property('formIdentifier')}
	formIdentifier2 = ${q(node).property('formIdentifier')}
	@cache {
		mode = 'uncached'
		context {
			1 = 'node'
			2 = 'documentNode'
		}
	}
}

prototype(Lelesys.Plugin.ContactForm:FormPost) < prototype(TYPO3.TypoScript:Template)
prototype(Lelesys.Plugin.ContactForm:FormPost) {
	templatePath = 'resource://Lelesys.Plugin.ContactForm/Private/Templates/TypoScript/PostForm.html'
	@cache {
		mode = 'uncached'
		context {
			1 = 'node'
			2 = 'documentNode'
		}
	}
}


default < page

oneColumnPage < page
oneColumnPage.body {
    templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/Page/InnerOneColumn.html'
}

newsPage < page
newsPage.body {
    templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/Page/NewsPage.html'
}

portfolioPage < page
portfolioPage.body {
    templatePath = 'resource://T3Studio.Typo3RuNet/Private/Templates/Page/NewsPage.html'
    portfolioPage = ${true}
}

// Remove wrap div
#prototype(TYPO3.Neos:ContentCollection) {
#    @process.wrapRemover = M12.Utils:WrapRemover
#    @process.wrapRemover.wrapperClass = 'neos-contentcollection'
#}
#prototype(TYPO3.Neos.NodeTypes:Text) {
#    @process.wrapRemover = M12.Utils:WrapRemover
#    @process.wrapRemover.wrapperClass = 'typo3-neos-nodetypes-text'
#}
prototype(TYPO3.Neos.NodeTypes:Headline) {
    @process.wrapRemover = M12.Utils:WrapRemover
    @process.wrapRemover.wrapperClass = 'typo3-neos-nodetypes-headline'
}


